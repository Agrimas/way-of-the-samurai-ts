{"version":3,"sources":["redux/reducers/dialogs-reducer.ts","components/App/App.module.css","components/MyFriends/Friend/Friend.module.css","components/Users/Users.module.css","components/common/Preloader/Preloader.module.css","components/Profile/InfoProfile/InfoProfile.module.css","components/MyFriends/Friend/Friend.tsx","components/MyFriends/MyFriends.tsx","components/Sidebar/SidebarContainer.tsx","components/Sidebar/Sidebar.tsx","api/api.ts","utilites/object-helper.ts","redux/reducers/users-reducer.ts","assets/img/user.jpg","utilites/withFetching.ts","components/Users/User/User.tsx","components/Users/Users.tsx","assets/img/loader.svg","components/common/Preloader/Preloader.tsx","components/common/Pagination/Pagination.tsx","redux/selectors/users-selector.ts","components/Users/UsersContainer.tsx","components/Profile/InfoProfile/InfoProfileForm.tsx","components/Profile/InfoProfile/InfoProfileView.tsx","components/Profile/InfoProfile/InfoProfile.tsx","redux/reducers/profile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/reducers/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/reducers/app-reducer.ts","components/App/App.tsx","reportWebVitals.ts","redux/reducers/sidebar-reducer.ts","redux/redux-store.ts","index.tsx","components/Sidebar/Sidebar.module.css","components/common/Pagination/Pagination.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Login/Login.module.css","hoc/WithAuthRedirect.tsx","components/Users/User/User.module.css","components/MyFriends/MyFriends.module.css","components/Profile/Profile.module.css"],"names":["ADD_MESSAGE","initialState","dialogs","id","name","messages","text","isMine","addMessage","type","dialogsReducer","state","action","newMessage","module","exports","Friend","className","Classes","item","src","alt","MyFriends","props","friends","map","friend","friendsWrap","SidebarContainer","connect","Sidebar","to","navlink","activeClassName","active","instance","axios","create","withCredentials","baseURL","headers","AuthAPI","get","then","response","data","post","delete","url","UsersAPI","pageNumber","pageSize","ProfileAPI","put","image","formData","FormData","append","updateObjectInArray","array","objPropName","elementParam","newObjectProps","element","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","users","currentPage","totalUsersCount","acceptFollow","acceptUnFollow","setCurrentPage","followUnfollow","method","actionCreator","dispatch","a","resultCode","usersReducer","followed","withFetching","asyncFunction","setFetching","User","status","photos","follow","unFollow","useState","isFetching","container","avatarBlock","small","userPhoto","disabled","onClick","unFollowHandler","followHandler","Users","u","Preloader","preloaderPhoto","Component","Pagination","onClickPaginationHandler","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","navButton","pagination","filter","p","selectedPage","getUsersS","usersPage","getPageSizeS","getCurrentPageS","getTotalUsersCountS","compose","WithAuthRedirect","getUsers","items","totalCount","isFirstRender","setFirstRender","useEffect","InfoProfileForm","profile","userId","fullName","contacts","aboutMe","lookingForAJob","lookingForAJobDescription","updateProfile","goToViewMode","contactsForm","Object","entries","key","contactTitle","htmlFor","style","minWidth","lookingForAJobState","setLookingForAJobState","initialValues","validationSchema","Yup","required","onSubmit","values","as","InfoProfileView","updatePhoto","width","height","objectFit","borderRadius","onChange","event","target","files","source","Contact","InfoProfile","editMode","setEditMode","isOwner","ADD_POST","SET_USER_PROFILE","SET_USER_PHOTOS","myPosts","likesCount","authProfile","getProfile","profileReducer","newPost","Post","Clasess","infoProfile","avatar","postText","MyPostsContainer","profilePage","addPost","textareaValue","setTextareaValue","dataMyPosts","addPostForm","textarea","value","currentTarget","button","Profile","main_photo","authUserID","auth","userData","newProfileData","getState","withRouter","userID","match","params","Header","logoBlock","navBlock","isLogin","navLink","login","logout","SET_USER_DATA","SET_USER_PROFILE_DATA","SET_AUTH","SET_ERROR","SET_CAPTCHA","error","captcha","setUserData","setUserProfileData","profileData","setAuth","setError","setCaptcha","getUserData","getCaptcha","authReducer","Login","LoginFormAuth","join","email","password","remember","validate","errorsForm","catch","errors","min","max","form","placeholder","tabIndex","component","autoComplete","SET_INITIALISATION","isInitialisation","appReducer","MessagesPage","React","lazy","app","setInitialisation","App","path","render","fallback","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","reducers","combineReducers","messagesPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","Store","createStore","applyMiddleware","ThunkMiddleWare","ReactDOM","store","document","getElementById","mapStateToPropsAuth","restProps"],"mappings":"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","file":"static/js/main.8449b793.chunk.js","sourcesContent":["const ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\ntype actionType = | addMessageActionType\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = Array<MessageType>;\r\nexport type MessageType = {\r\n    id: number\r\n    text: string\r\n    isMine: boolean\r\n}\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Dima'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Sveta'\r\n        },\r\n    ],\r\n    messages: [\r\n        {\r\n            id: 1,\r\n            text: 'Hi',\r\n            isMine: true\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'Hi',\r\n            isMine: false\r\n        },\r\n        {\r\n            id: 3,\r\n            text: 'How are you?',\r\n            isMine: true\r\n        }\r\n    ]\r\n};\r\n\r\nfunction dialogsReducer(state = initialState, action: actionType) {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let newMessage: MessageType = {\r\n                id: 456,\r\n                text: action.text,\r\n                isMine: true\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype addMessageActionType = {\r\n    type: typeof ADD_MESSAGE\r\n    text: string\r\n}\r\nexport const addMessage = (text: string): addMessageActionType => ({\r\n    type: ADD_MESSAGE,\r\n    text\r\n})\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__17MKp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Friend_item__3hYa2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Users_container__1fmfa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__1t_d9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_photo\":\"InfoProfile_main_photo__ZwzdV\",\"container\":\"InfoProfile_container__DV8ay\"};","import React from 'react';\r\nimport Classes from './Friend.module.css';\r\n\r\nexport function Friend({name}: { name: string }) {\r\n    return (\r\n        <div className={Classes.item}>\r\n            <img src=\"https://img.novosti-n.org/upload/ukraine/499685.jpg\" alt=\"\"/>\r\n            {name}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Classes from './MyFriends.module.css';\r\nimport {Friend} from './Friend/Friend';\r\n\r\ntype MyFriendsType = {\r\n    friends: Array<{ id: number, name: string }>\r\n}\r\n\r\nexport function MyFriends(props: MyFriendsType) {\r\n    let friends = props.friends.map(friend => <Friend name={friend.name}/>)\r\n\r\n    return (\r\n        <div className={Classes.friendsWrap}>\r\n            <h2>My friends</h2>\r\n            <div className={Classes.friends}>\r\n                {friends[0]}\r\n                {friends[1]}\r\n                {friends[2]}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Sidebar} from './Sidebar';\r\nimport {StateType} from '../../redux/redux-store';\r\n\r\nfunction mapStateToProps(state: StateType) {\r\n    return {\r\n        friends: state.friends\r\n    }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps, {})(Sidebar);","import React from 'react';\r\nimport Classes from './Sidebar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {MyFriends} from '../MyFriends/MyFriends';\r\n\r\ntype SidebarType = {\r\n    friends: Array<{ id: number, name: string }>\r\n}\r\n\r\nexport function Sidebar(props: SidebarType) {\r\n    return (\r\n        <div className={Classes.Sidebar}>\r\n            <nav>\r\n                <NavLink to={'/profile'} className={Classes.navlink} activeClassName={Classes.active}>Profile</NavLink>\r\n                <NavLink to={'/messages'} className={Classes.navlink}\r\n                         activeClassName={Classes.active}>Messages</NavLink>\r\n                <NavLink to={'/users'} className={Classes.navlink}\r\n                         activeClassName={Classes.active}>Users</NavLink>\r\n            </nav>\r\n            <MyFriends friends={props.friends}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '4e70ea14-87f8-403e-9a3c-6012dce2b89c'\r\n    },\r\n})\r\n\r\ntype ResponseType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n}\r\n\r\n// AUTH\r\nexport type requestLoginType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean,\r\n    captcha: string\r\n}\r\nexport type userDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport const AuthAPI = {\r\n    auth() {\r\n        return instance.get<Promise<ResponseType & { data: userDataType }>>(`auth/me/`).then(response => response.data);\r\n    },\r\n    login(data: any) {\r\n        return instance.post<Promise<ResponseType & { data: { userId: number } }>>('auth/login/', data).then(response => response.data);\r\n    },\r\n    logout() {\r\n        return instance.delete<Promise<ResponseType & { data: {} }>>('auth/login/').then(response => response.data);\r\n    },\r\n    getCaptcha() {\r\n        return instance.get<{ url: string }>('security/get-captcha-url').then(response => response.data.url)\r\n    }\r\n}\r\n\r\n// USERS\r\nexport type UsersType = Array<UserType>\r\nexport type UserType = {\r\n    id: string,\r\n    name: string,\r\n    status: string | null,\r\n    photos: ProfilePhotosType,\r\n    followed: boolean,\r\n}\r\nexport type UsersResponseType = {\r\n    error: null | string\r\n    items: UsersType\r\n    totalCount: number\r\n}\r\nexport type FollowUnfollowResponseType = ResponseType & { data: {} };\r\nexport const UsersAPI = {\r\n    getUsers(pageNumber: number, pageSize: number) {\r\n        return instance.get<Promise<UsersResponseType>>(`users?page=${pageNumber}&count=${pageSize}`).then(response => response.data);\r\n    },\r\n    follow(id: string) {\r\n        return instance.post<FollowUnfollowResponseType>(`follow/${id}`).then(response => response.data)\r\n    },\r\n    unFollow(id: string) {\r\n        return instance.delete<FollowUnfollowResponseType>(`follow/${id}`).then(response => response.data)\r\n    },\r\n}\r\n\r\n// PROFILE\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: ProfileContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: ProfilePhotosType,\r\n}\r\nexport type ProfileContactsType = {\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string,\r\n}\r\nexport type ProfilePhotosType = {\r\n    small: string,\r\n    large: string,\r\n}\r\nexport type updateProfileRequestType = {\r\n    aboutMe: string,\r\n    contacts: ProfileContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n}\r\nexport type PostType = {\r\n    id: number\r\n    text: string\r\n    likesCount: number\r\n}\r\nexport const ProfileAPI = {\r\n    getProfile(id: number) {\r\n        return instance.get<Promise<ProfileType>>(`profile/${id}`).then(response => response.data);\r\n    },\r\n    updateProfile(data: updateProfileRequestType) {\r\n        return instance.put<Promise<ResponseType & { data: object }>>(`profile`, data).then(response => response.data);\r\n    },\r\n    updatePhoto(image: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', image);\r\n        return instance.put<ResponseType & { data: { photos: ProfilePhotosType } }>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            }\r\n        }).then(response => response.data)\r\n    }\r\n}","export const updateObjectInArray = (array: any, objPropName: any, elementParam: any, newObjectProps: any) => {\r\n    return array.map((element: any) => {\r\n        if (element[objPropName] === elementParam) {\r\n            return {...element, ...newObjectProps};\r\n        }\r\n        return element;\r\n    })\r\n}","import {FollowUnfollowResponseType, UsersAPI, UsersType} from '../../api/api';\r\nimport {StateType} from '../redux-store';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {Dispatch} from 'react';\r\nimport {updateObjectInArray} from '../../utilites/object-helper';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\n\r\ntype ActionsTypes =\r\n    followActionType\r\n    | unFollowActionType\r\n    | setUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalUsersCountActionType\r\n\r\n\r\nconst initialState = {\r\n    users: [] as UsersType,\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    totalUsersCount: 0,\r\n}\r\n\r\nfunction usersReducer(state = initialState, action: ActionsTypes) {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, 'id', action.id, {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, 'id', action.id, {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            if (action.users) {\r\n                return {\r\n                    ...state,\r\n                    users: [...action.users],\r\n                }\r\n            }\r\n            return state;\r\n        case SET_CURRENT_PAGE:\r\n            if (action.currentPage) {\r\n                return {\r\n                    ...state,\r\n                    currentPage: action.currentPage\r\n                }\r\n            }\r\n            return state;\r\n        case SET_TOTAL_USERS_COUNT:\r\n            if (action.totalUsersCount) {\r\n                return {\r\n                    ...state,\r\n                    totalUsersCount: action.totalUsersCount\r\n                }\r\n            }\r\n            return {...state};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype followActionType = {\r\n    type: typeof FOLLOW\r\n    id: string\r\n}\r\nexport const acceptFollow = (id: string): followActionType => ({\r\n    type: FOLLOW,\r\n    id,\r\n})\r\ntype unFollowActionType = {\r\n    type: typeof UNFOLLOW\r\n    id: string\r\n}\r\nexport const acceptUnFollow = (id: string): unFollowActionType => ({\r\n    type: UNFOLLOW,\r\n    id,\r\n})\r\ntype setUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: UsersType\r\n}\r\nexport const setUsers = (users: UsersType): setUsersActionType => ({\r\n    type: SET_USERS,\r\n    users\r\n})\r\ntype setCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage,\r\n})\r\ntype setTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): setTotalUsersCountActionType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkAction<Promise<void>, StateType, unknown, ActionsTypes> => async dispatch => {\r\n    dispatch(setCurrentPage(currentPage));\r\n    const data = await UsersAPI.getUsers(currentPage, pageSize);\r\n    dispatch(setUsers(data.items));\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\nconst followUnfollow = async (id: string, method: (id: string) => Promise<FollowUnfollowResponseType>, actionCreator: (id: string) => ActionsTypes, dispatch: Dispatch<ActionsTypes>) => {\r\n    const result = await method(id)\r\n    if (result.resultCode === 0) {\r\n        dispatch(actionCreator(id));\r\n    }\r\n}\r\nexport const follow = (id: string): ThunkAction<Promise<void>, StateType, unknown, ActionsTypes> => async dispatch => {\r\n    await followUnfollow(id, UsersAPI.follow, acceptFollow, dispatch)\r\n};\r\nexport const unFollow = (id: string): ThunkAction<Promise<void>, StateType, unknown, ActionsTypes> => async dispatch => {\r\n    await followUnfollow(id, UsersAPI.unFollow, acceptUnFollow, dispatch)\r\n};\r\n\r\nexport default usersReducer;","export default __webpack_public_path__ + \"static/media/user.42defa2a.jpg\";","export function withFetching(\r\n    asyncFunction: () => Promise<void>,\r\n    setFetching: (isFetching: boolean) => void,\r\n) {\r\n    setFetching(true);\r\n    asyncFunction().then(() => {\r\n        setFetching(false);\r\n    })\r\n}","import React, {useState} from 'react';\r\nimport {UserType} from '../../../api/api';\r\nimport Classes from './User.module.css';\r\nimport userPhoto from '../../../assets/img/user.jpg';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {withFetching} from '../../../utilites/withFetching';\r\n\r\ntype UserPropsType = UserType & {\r\n    follow: (id: string) => void\r\n    unFollow: (id: string) => void\r\n}\r\n\r\nfunction User({id, name, status, photos, followed, follow, unFollow}: UserPropsType) {\r\n\r\n    let [isFetching, setFetching] = useState(false);\r\n\r\n    function followHandler(id: string) {\r\n        withFetching(async () => {\r\n            await follow(id)\r\n        }, setFetching);\r\n    }\r\n\r\n    async function unFollowHandler(id: string) {\r\n        withFetching(async () => {\r\n            await unFollow(id)\r\n        }, setFetching);\r\n    }\r\n\r\n    return (\r\n        <div className={Classes.container}>\r\n            <div className={Classes.avatarBlock}>\r\n                <NavLink to={`/profile/${id}`}>\r\n                    <img src={photos.small ? photos.small : userPhoto} alt=\"\"/>\r\n                </NavLink>\r\n                <button disabled={isFetching}\r\n                        onClick={() => {\r\n                            followed ? unFollowHandler(id) : followHandler(id)\r\n                        }}>\r\n                    {followed ? 'Unfollow' : 'Follow'}\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {name}, <br/>\r\n                <div className={Classes.status}>\r\n                    {status}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport User from './User/User';\r\nimport Classes from './Users.module.css';\r\nimport {UsersPageType} from './UsersContainer';\r\n\r\nexport function Users({users, follow, unFollow}: UsersPageType) {\r\n    return (\r\n        <div className={Classes.container}>\r\n            {users.map(u => <User key={u.id}\r\n                                  id={u.id}\r\n                                  name={u.name}\r\n                                  status={u.status}\r\n                                  photos={u.photos}\r\n                                  followed={u.followed}\r\n\r\n                                  follow={follow}\r\n                                  unFollow={unFollow}\r\n            />)}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/loader.b57ed06f.svg\";","import React, {Component} from 'react';\r\nimport preloaderPhoto from './../../../assets/img/loader.svg';\r\nimport Classes from './Preloader.module.css';\r\n\r\nclass Preloader extends Component {\r\n    render() {\r\n        return (\r\n            <div className={Classes.container}>\r\n                <img src={preloaderPhoto} alt=\"\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preloader;","import React, {useState} from 'react';\r\nimport Classes from './Pagination.module.css';\r\n\r\ntype PaginationPropsType = {\r\n    currentPage: number\r\n    onClickPaginationHandler: (pageNumber: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n}\r\n\r\nfunction Pagination({\r\n                        currentPage,\r\n                        onClickPaginationHandler,\r\n                        totalUsersCount,\r\n                        pageSize,\r\n                        portionSize\r\n                    }: PaginationPropsType) {\r\n\r\n    const pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const portionCount = pagesCount / portionSize;\r\n    const [portionNumber, setPortionNumber,] = useState(1);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n        <div className={Classes.container}>\r\n            <div className={Classes.navButton}>\r\n                {portionNumber === 1 ? false : <button onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>Prev</button>}\r\n            </div>\r\n            <div className={Classes.pagination}>\r\n                {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(pageNumber => <span\r\n                    key={pageNumber}\r\n                    className={currentPage === pageNumber ? Classes.selectedPage : ''}\r\n                    onClick={() => {\r\n                        onClickPaginationHandler(pageNumber);\r\n                    }\r\n                    }>{pageNumber}</span>)}\r\n            </div>\r\n            <div className={Classes.navButton}>\r\n                {portionNumber === portionCount ? false : <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }\r\n                }>Next</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import {StateType} from '../redux-store';\r\n\r\nexport const getUsersS = (state: StateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSizeS = (state: StateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getCurrentPageS = (state: StateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getTotalUsersCountS = (state: StateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {UsersType} from '../../api/api';\r\nimport {follow, getUsers, unFollow,} from '../../redux/reducers/users-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {Users} from './Users';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {withFetching} from '../../utilites/withFetching';\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport {getCurrentPageS, getPageSizeS, getTotalUsersCountS, getUsersS} from '../../redux/selectors/users-selector';\r\n\r\nexport type UsersPageType = {\r\n    users: UsersType,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    totalUsersCount: number,\r\n    follow: (id: string) => void\r\n    unFollow: (id: string) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nfunction UsersContainer(props: UsersPageType) {\r\n    let [isFetching, setFetching] = useState(false);\r\n    let [isFirstRender, setFirstRender] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (isFirstRender) {\r\n            setFirstRender(false);\r\n        }\r\n\r\n        withFetching(async () => {\r\n            await props.getUsers(props.currentPage, props.pageSize)\r\n        }, setFetching)\r\n\r\n    }, [props.currentPage])\r\n\r\n    const onClickPaginationHandler = (pageNumber: number) => {\r\n        withFetching(async () => {\r\n            await props.getUsers(pageNumber, props.pageSize);\r\n        }, setFetching)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Pagination totalUsersCount={props.totalUsersCount} currentPage={props.currentPage}\r\n                        pageSize={props.pageSize} onClickPaginationHandler={onClickPaginationHandler}\r\n                        portionSize={5}/>\r\n            {\r\n                isFetching || isFirstRender ?\r\n                    <Preloader/> :\r\n                    <Users {...props}/>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state: StateType) {\r\n    return {\r\n        users: getUsersS(state),\r\n        pageSize: getPageSizeS(state),\r\n        currentPage: getCurrentPageS(state),\r\n        totalUsersCount: getTotalUsersCountS(state),\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(WithAuthRedirect, connect(mapStateToProps, {\r\n    follow,\r\n    unFollow,\r\n    getUsers,\r\n}))(UsersContainer);\r\n","import React, {useState} from 'react';\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\nimport * as Yup from 'yup';\nimport {InfoProfileType} from './InfoProfile';\n\nexport function InfoProfileForm({\n                                    profile: {\n                                        userId,\n                                        fullName,\n                                        contacts,\n                                        aboutMe,\n                                        lookingForAJob,\n                                        lookingForAJobDescription\n                                    },\n                                    updateProfile,\n                                    goToViewMode,\n                                }: InfoProfileType & {\n                                    goToViewMode: () => void\n                                }\n) {\n\n    const contactsForm = Object.entries(contacts).map((key) => {\n        const contactTitle = 'contacts.' + key[0];\n        return <div>\n            <label htmlFor={contactTitle}>{contactTitle}</label><br/>\n            <Field id={contactTitle} name={contactTitle} style={{minWidth: '30%'}}/>\n            <ErrorMessage name={contactTitle}/>\n        </div>\n    })\n\n    const [lookingForAJobState, setLookingForAJobState] = useState(lookingForAJob)\n    return (\n        <Formik\n            initialValues={{\n                userId,\n                fullName,\n                aboutMe,\n                lookingForAJob: lookingForAJobState,\n                lookingForAJobDescription,\n                contacts: {...contacts},\n            }}\n            validationSchema={Yup.object({\n                fullName: Yup.string().required(),\n                aboutMe: Yup.string(),\n                lookingForAJob: Yup.boolean().required(),\n                lookingForAJobDescription: Yup.string(),\n            })}\n            onSubmit={async (values) => {\n                await updateProfile(values);\n                goToViewMode();\n            }}\n        >\n            <Form>\n                <div>\n                    <label htmlFor=\"fullName\">Full Name</label><br/>\n                    <Field id={'fullName'} name={'fullName'}/>\n                    <ErrorMessage name=\"fullName\"/>\n                </div>\n\n                <div>\n                    <label htmlFor=\"aboutMe\">About me</label><br/>\n                    <Field id={'aboutMe'} name={'aboutMe'} as={'textarea'}/>\n                    <ErrorMessage name=\"aboutMe\"/>\n                </div>\n\n                <div>\n                    <label htmlFor=\"lookingForAJob\">Looking for a job</label>\n                    <Field id={'lookingForAJob'} name={'lookingForAJob'} type={'checkbox'} onClick={() => {\n                        setLookingForAJobState(!lookingForAJobState);\n                    }}/>\n                    <ErrorMessage name=\"lookingForAJob\"/>\n                </div>\n\n                {lookingForAJobState && <div>\n                    <label htmlFor=\"lookingForAJobDescription\">Looking for a job description</label><br/>\n                    <Field id={'lookingForAJobDescription'} name={'lookingForAJobDescription'} as={'textarea'}/>\n                    <ErrorMessage name=\"lookingForAJobDescription\"/>\n                </div>}\n\n                {contactsForm}\n\n                <div>\n                    <button type={'submit'}> Save</button>\n                </div>\n            </Form>\n        </Formik>\n    )\n}","import React from 'react';\nimport userPhoto from '../../../assets/img/user.jpg';\nimport {InfoProfileType} from './InfoProfile';\n\nexport function InfoProfileView({\n                                    profile: {\n                                        fullName,\n                                        contacts,\n                                        aboutMe,\n                                        lookingForAJob,\n                                        lookingForAJobDescription,\n                                        photos,\n                                    },\n                                    updatePhoto\n                                }: InfoProfileType) {\n\n    return (\n        <>\n            <div>\n                <img src={photos?.small ?? userPhoto} alt=\"\"\n                     style={{width: '100px', height: '100px', objectFit: 'contain', borderRadius: '10px'}}/><br/>\n                <input type=\"file\" onChange={async (event) => {\n                    if (event.target.files) {\n                        await updatePhoto(event.target.files[0])\n                    }\n                }}/>\n            </div>\n\n            <h1>{fullName}</h1>\n\n            <p>{aboutMe}</p>\n\n            <p>Looking for a job: {lookingForAJob ? 'Yes' : 'No'}</p>\n            {lookingForAJob && <p>{lookingForAJobDescription}</p>}\n\n            {Object.entries(contacts).map((key) => {\n                return <Contact key={key[0]} source={key[0]} url={key[1]}/>\n            })}\n        </>\n    )\n}\n\ntype ContactPropsType = {\n    source: string\n    url: string\n}\n\nconst Contact = ({source, url}: ContactPropsType) => {\n    return (\n        <div>\n            {source}: {url}\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport Classes from './InfoProfile.module.css';\nimport {InfoProfileForm} from './InfoProfileForm';\nimport {ProfileType, updateProfileRequestType} from '../../../api/api';\nimport {InfoProfileView} from './InfoProfileView';\n\nexport type InfoProfileType = {\n    profile: ProfileType\n    updateProfile: (data: updateProfileRequestType) => void\n    updatePhoto: (image: File) => void\n    isOwner: boolean\n}\n\nexport function InfoProfile(props: InfoProfileType) {\n\n    const [editMode, setEditMode] = useState(false);\n\n    const goToEditMode = () => {\n        setEditMode(true);\n    }\n\n    const goToViewMode = () => {\n        setEditMode(false);\n    }\n\n    return (\n        <div className={Classes.container}>\n            {editMode ?\n                <InfoProfileForm {...props} goToViewMode={goToViewMode}/> :\n                <>\n                    {props.isOwner && <button onClick={goToEditMode}>Edit</button>}\n                    <InfoProfileView {...props}/>\n                </>\n            }\n        </div>\n    )\n}","import {PostType, ProfileAPI, ProfilePhotosType, ProfileType, updateProfileRequestType} from '../../api/api';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {StateType} from '../redux-store';\r\n\r\ntype actionType =\r\n    | addPostActionType\r\n    | setUserProfileActionType\r\n    | setUserPhotosActionType\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\nconst SET_USER_PHOTOS = 'SET-USER-PHOTOS';\r\n\r\nconst initialState = {\r\n    myPosts: [\r\n        {\r\n            id: 1,\r\n            text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Id itaque obcaecati pariatur sit veniam! Accusantium adipisci delectus dolor doloribus dolorum ea harum in ipsum iste minus, quo ratione temporibus unde.',\r\n            likesCount: 5\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'Lorem ipsum dolor sit amet.',\r\n            likesCount: 6\r\n        },\r\n        {\r\n            id: 3,\r\n            text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi, tempora!',\r\n            likesCount: 8\r\n        }\r\n    ],\r\n    profile: {} as ProfileType,\r\n    authProfile: {} as ProfileType,\r\n};\r\n\r\nfunction profileReducer(state = initialState, action: actionType) {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: 123,\r\n                text: action.text,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                myPosts: [...state.myPosts, newPost],\r\n            }\r\n        case SET_USER_PROFILE:\r\n            if (action.profile) {\r\n                return {\r\n                    ...state,\r\n                    profile: action.profile\r\n                }\r\n            }\r\n            return state;\r\n        case SET_USER_PHOTOS:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: {...action.photos},\r\n                }\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\ntype addPostActionType = { type: typeof ADD_POST, text: string }\r\nexport const addPost = (text: string): addPostActionType => {\r\n    return {\r\n        type: ADD_POST,\r\n        text,\r\n    }\r\n}\r\ntype setUserProfileActionType = { type: typeof SET_USER_PROFILE, profile: ProfileType | null }\r\nexport const setUserProfile = (profile: ProfileType | null): setUserProfileActionType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n})\r\ntype setUserPhotosActionType = { type: typeof SET_USER_PHOTOS, photos: ProfilePhotosType }\r\nexport const setUserPhotos = (photos: ProfilePhotosType): setUserPhotosActionType => ({type: SET_USER_PHOTOS, photos});\r\n\r\nexport const getProfile = (id: number): ThunkAction<Promise<void>, StateType, unknown, actionType> => async dispatch => {\r\n    const data = await ProfileAPI.getProfile(id)\r\n    dispatch(setUserProfile(data));\r\n}\r\nexport const updateProfile = (newProfileData: updateProfileRequestType): ThunkAction<Promise<void>, StateType, unknown, actionType> => async (dispatch, getState) => {\r\n    const response = await ProfileAPI.updateProfile(newProfileData);\r\n    if (response.resultCode === 0) {\r\n        const id = getState().auth.userData!.id;\r\n        await dispatch(getProfile(id));\r\n    }\r\n}\r\nexport const updatePhoto = (image: File): ThunkAction<Promise<void>, StateType, unknown,\r\n    actionType> => async (dispatch) => {\r\n    const response = await ProfileAPI.updatePhoto(image);\r\n    if (response.resultCode === 0) {\r\n        await dispatch(setUserPhotos(response.data.photos));\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\nimport Clasess from './Post.module.css';\nimport {PostType} from '../../../../api/api';\n\nexport function Post({text, likesCount}: PostType) {\n    return (\n        <div className={Clasess.container}>\n            <div className={Clasess.infoProfile}>\n                <img className={Clasess.avatar} src=\"https://img.novosti-n.org/upload/ukraine/499685.jpg\" alt=\"\"/>\n                <span>Anton</span>\n            </div>\n            <div className={Clasess.likesCount}>\n                {likesCount}\n            </div>\n            <div className={Clasess.postText}>\n                <p>{text}</p>\n            </div>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport {addPost} from '../../../redux/reducers/profile-reducer';\nimport {StateType} from '../../../redux/redux-store';\nimport {MyPosts} from './MyPosts';\nimport {connect} from 'react-redux';\n\nfunction mapStateToProps(state: StateType) {\n    return {\n        myPosts: state.profilePage.myPosts,\n        profile: state.profilePage.profile\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\n","import React, {ChangeEvent, useState} from 'react';\nimport Classes from './MyPosts.module.css';\nimport {Post} from './Post/Post';\nimport {PostType, ProfileType} from '../../../api/api';\n\ntype MyPostsType = {\n    myPosts: Array<PostType>\n    profile: ProfileType | null\n    addPost: (text: string) => void\n}\n\nexport function MyPosts(props: MyPostsType) {\n\n    const [textareaValue, setTextareaValue] = useState('');\n\n    let dataMyPosts = props.myPosts.map(post => <Post key={post.id} id={post.id} text={post.text}\n                                                      likesCount={post.likesCount}/>)\n\n    const textareaHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        setTextareaValue(event.currentTarget.value);\n    }\n\n    const addPost = () => {\n        props.addPost(textareaValue);\n        setTextareaValue('');\n    }\n\n    return (\n        <div className={Classes.container}>\n            <h2>My Posts</h2>\n            <div className={Classes.addPostForm}>\n                <textarea className={Classes.textarea} value={textareaValue} onChange={textareaHandler}/>\n                <button className={Classes.button} onClick={addPost}>add Post</button>\n            </div>\n            {dataMyPosts}\n        </div>\n    )\n}\n\n","import React from 'react';\nimport Classes from './Profile.module.css';\nimport {InfoProfile} from './InfoProfile/InfoProfile';\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\nimport Preloader from '../common/Preloader/Preloader';\nimport {ProfilePagePropsType} from './ProfileContainer';\n\nexport function Profile({profile, updateProfile, updatePhoto, isOwner}: ProfilePagePropsType & {isOwner: boolean}) {\n    return (\n        <div className={Classes.container}>\n            <img className={Classes.main_photo} src=\"https://storge.pic2.me/c/1360x800/778/58619cae890e5.jpg\"\n                 alt=\"Main photo\"/>\n            {profile !== null ?\n                <>\n                    <InfoProfile profile={profile} updateProfile={updateProfile} updatePhoto={updatePhoto} isOwner={isOwner}/>\n                    <MyPostsContainer/>\n                </> :\n                <Preloader/>}\n        </div>\n    )\n}\n\n","import React, {useEffect, useState} from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getProfile,\r\n    updatePhoto,\r\n    updateProfile\r\n} from '../../redux/reducers/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {withFetching} from '../../utilites/withFetching';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {ProfileType, updateProfileRequestType} from '../../api/api';\r\n\r\nexport type ProfilePagePropsType = RouteComponentProps<{ userID: string }> & {\r\n    authUserID: number\r\n    getProfile: (id: number) => void\r\n    profile: ProfileType | null\r\n    updateProfile: (data: updateProfileRequestType) => void\r\n    updatePhoto: (image: File) => void\r\n}\r\n\r\nfunction ProfileContainer(props: ProfilePagePropsType) {\r\n\r\n    const [isFirstRender, setFirstRender] = useState(true);\r\n    const [isFetching, setFetching] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isFirstRender) {\r\n            setFirstRender(false)\r\n        }\r\n\r\n        const userID = props.match.params.userID ?? props.authUserID;\r\n\r\n        withFetching(async () => {\r\n            await props.getProfile(+userID)\r\n        }, setFetching)\r\n\r\n    }, [props.match.params.userID])\r\n\r\n    return (\r\n        <>\r\n            {isFetching || isFirstRender ? <Preloader/> : <Profile {...props} isOwner={!props.match.params.userID}/>}\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        authUserID: state.auth.userData?.id\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    getProfile,\r\n    updateProfile,\r\n    updatePhoto\r\n}), withRouter, WithAuthRedirect)(ProfileContainer)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Classes from './Header.module.css';\r\nimport {HeaderType} from './HeaderContainer';\r\n\r\nexport function Header(props: HeaderType & { logout: () => void }) {\r\n    return (\r\n        <div className={Classes.Header}>\r\n            <div className={Classes.logoBlock}>\r\n                <img\r\n                    src=\"https://image.winudf.com/v2/image1/Y29tLmRveHVhbnZpbmgucmVhY3RibG9nc19pY29uXzE1ODg4MDQ2MTdfMDY4/icon.png?w=100&fakeurl=1\"\r\n                    alt=\"\"/>\r\n            </div>\r\n\r\n            <div className={Classes.navBlock}>\r\n                {props.isLogin &&\r\n                <>\r\n                    <NavLink to={'/profile'} className={Classes.navLink}>\r\n                        {props.login}\r\n                    </NavLink>\r\n                    <button className={Classes.navLink} onClick={props.logout}>Logout</button>\r\n                </>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {AuthAPI, ProfileAPI, ProfileType, requestLoginType, userDataType} from '../../api/api';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {StateType} from '../redux-store';\r\n\r\nconst SET_USER_DATA = 'SET-USER-DATA';\r\nconst SET_USER_PROFILE_DATA = 'SET-USER-PROFILE-DATA';\r\nconst SET_AUTH = 'SET-AUTH';\r\nconst SET_ERROR = 'SET-ERROR';\r\nconst SET_CAPTCHA = 'SET-CAPTCHA';\r\n\r\ntype actionType =\r\n    setUserDataAction\r\n    | setAuthActionType\r\n    | setErrorActionType\r\n    | setCaptchaActionType\r\n    | setUserProfileDataAction\r\n\r\nconst initialState = {\r\n    isLogin: false,\r\n    userData: null as userDataType | null,\r\n    error: null as string | null,\r\n    captcha: null as string | null,\r\n    profile: null as ProfileType | null,\r\n}\r\n\r\nfunction authReducer(state = initialState, action: actionType) {\r\n    switch (action.type) {\r\n        case SET_AUTH:\r\n            return {\r\n                ...state,\r\n                isLogin: action.isLogin,\r\n            }\r\n        case SET_USER_PROFILE_DATA:\r\n            return {\r\n                ...state,\r\n                profile: action.profileData,\r\n            }\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                userData: action.userData,\r\n            }\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n            }\r\n        case SET_CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captcha: action.captcha\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype setUserDataAction = {\r\n    type: typeof SET_USER_DATA\r\n    userData: userDataType | null\r\n}\r\nexport const setUserData = (userData: userDataType | null): setUserDataAction => ({\r\n    type: SET_USER_DATA,\r\n    userData: userData,\r\n})\r\ntype setUserProfileDataAction = {\r\n    type: typeof SET_USER_PROFILE_DATA\r\n    profileData: ProfileType | null\r\n}\r\nexport const setUserProfileData = (profileData: ProfileType | null): setUserProfileDataAction => ({\r\n    type: SET_USER_PROFILE_DATA,\r\n    profileData,\r\n})\r\ntype setAuthActionType = {\r\n    type: typeof SET_AUTH\r\n    isLogin: boolean\r\n}\r\nexport const setAuth = (isLogin: boolean): setAuthActionType => ({type: SET_AUTH, isLogin})\r\ntype setErrorActionType = {\r\n    type: typeof SET_ERROR\r\n    error: string | null\r\n}\r\nexport const setError = (error: string | null): setErrorActionType => ({type: SET_ERROR, error})\r\ntype setCaptchaActionType = {\r\n    type: typeof SET_CAPTCHA\r\n    captcha: string | null\r\n}\r\nexport const setCaptcha = (captcha: string | null): setCaptchaActionType => ({type: SET_CAPTCHA, captcha})\r\n\r\nexport const getUserData = (): ThunkAction<Promise<void>, StateType, unknown, actionType> => async dispatch => {\r\n    const response = await AuthAPI.auth()\r\n    if (response.resultCode === 0) {\r\n        dispatch(setUserData(response.data));\r\n        const profile = await ProfileAPI.getProfile(response.data.id);\r\n        dispatch(setUserProfileData(profile));\r\n        dispatch(setAuth(true));\r\n    }\r\n}\r\nexport const login = (data: requestLoginType): ThunkAction<Promise<void>, StateType, unknown, actionType> => async dispatch => {\r\n    const response = await AuthAPI.login(data)\r\n    switch (response.resultCode) {\r\n        case 0:\r\n            await dispatch(getUserData());\r\n            dispatch(setError(null))\r\n            dispatch(setCaptcha(null));\r\n            break;\r\n        case 10:\r\n            await dispatch(getCaptcha());\r\n            break;\r\n        default:\r\n            dispatch(setError(response.messages.join()))\r\n            break;\r\n    }\r\n}\r\nexport const logout = (): ThunkAction<Promise<void>, StateType, unknown, actionType> => async dispatch => {\r\n    const response = await AuthAPI.logout();\r\n    if (response.resultCode === 0) {\r\n        dispatch(setAuth(false));\r\n        dispatch(setUserData(null));\r\n        dispatch(setUserProfileData(null));\r\n    }\r\n}\r\nexport const getCaptcha = (): ThunkAction<Promise<void>, StateType, unknown, actionType> => async dispatch => {\r\n    const url = await AuthAPI.getCaptcha();\r\n    if (url) {\r\n        dispatch(setCaptcha(url));\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n","import React from 'react';\r\nimport {Header} from './Header';\r\nimport {logout} from '../../redux/reducers/auth-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../../redux/redux-store';\r\n\r\nexport type HeaderType = {\r\n    login: string | undefined\r\n    isLogin: boolean\r\n    logout: () => void\r\n}\r\n\r\nconst HeaderContainer = (props: HeaderType) => {\r\n    return (\r\n        <Header login={props.login}\r\n                isLogin={props.isLogin}\r\n                logout={props.logout}\r\n        />\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state: StateType) {\r\n    return {\r\n        login: state.auth.userData?.login,\r\n        isLogin: state.auth.isLogin,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import {ErrorMessage, Field, Form, Formik} from 'formik';\r\nimport Classes from './Login.module.css';\r\nimport React from 'react';\r\nimport * as Yup from 'yup';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/reducers/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {StateType} from '../../redux/redux-store';\r\n\r\nexport default function Login() {\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginFormAuth/>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype LoginFormPropsType = {\r\n    isLogin: boolean\r\n    error: string | null\r\n    login: (data: any) => void\r\n    captcha: null | string\r\n}\r\n\r\nconst LoginForm = (props: LoginFormPropsType) => {\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n        remember: false,\r\n        captcha: '',\r\n    }\r\n\r\n    type errorsFormType = {\r\n        email?: string,\r\n        password?: string,\r\n        captcha?: string,\r\n    }\r\n    const validate = (values: typeof initialValues) => {\r\n\r\n        const errorsForm: errorsFormType = {};\r\n\r\n        Yup.string()\r\n            .required('Required')\r\n            .validate(values.email)\r\n            .catch(({errors}) => {\r\n                errorsForm.email = errors[0]\r\n            })\r\n\r\n        Yup.string()\r\n            .required('Required')\r\n            .min(6, 'Too Short!')\r\n            .max(50, 'Too Long!')\r\n            .validate(values.password)\r\n            .catch(({errors}) => {\r\n                errorsForm.password = errors[0]\r\n            })\r\n\r\n        if (props.captcha) {\r\n            Yup.string()\r\n                .required('Required')\r\n                .validate(values.captcha)\r\n                .catch(({errors}) => {\r\n                    debugger\r\n                    errorsForm.captcha = errors[0]\r\n                })\r\n        }\r\n        return errorsForm;\r\n    };\r\n\r\n    return <>\r\n        {props.isLogin ? <Redirect to={'/profile'}/> :\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validate={validate}\r\n                onSubmit={async (values) => {\r\n                    await props.login(values);\r\n                }}\r\n            >\r\n                <Form className={Classes.form}>\r\n                    {props.error}\r\n                    {\r\n                        props.captcha && <>\r\n                            <img src={props.captcha} alt=\"captcha\"/>\r\n                            <label htmlFor={'captcha'}>Captcha</label>\r\n                            <Field\r\n                                name={'captcha'}\r\n                                placeholder={'captcha'}\r\n                                tabIndex={1}\r\n                            />\r\n                            <ErrorMessage component=\"div\" name=\"captcha\" className={Classes.error}/>\r\n                        </>}\r\n\r\n                    <label htmlFor=\"email\"> Email</label>\r\n                    <Field\r\n                        name={'email'}\r\n                        placeholder={'email'}\r\n                        tabIndex={1}\r\n                    />\r\n                    <ErrorMessage component=\"div\" name=\"email\" className={Classes.error}/>\r\n\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <Field\r\n                        name={'password'}\r\n                        placeholder={'password'}\r\n                        type={'password'}\r\n                        tabIndex={2}\r\n                    />\r\n                    <ErrorMessage component=\"div\" name=\"password\" className={Classes.error}/>\r\n\r\n                    <label htmlFor=\"remember\">Remember password</label>\r\n                    <Field\r\n                        name={'remember'}\r\n                        type={'checkbox'}\r\n                        tabIndex={3}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <button type=\"submit\" tabIndex={4}>Submit</button>\r\n                </Form>\r\n            </Formik>}\r\n    </>\r\n}\r\n\r\nfunction mapStateToProps(state: StateType) {\r\n    return {\r\n        isLogin: state.auth.isLogin,\r\n        error: state.auth.error,\r\n        captcha: state.auth.captcha,\r\n    }\r\n}\r\n\r\nconst LoginFormAuth = connect(mapStateToProps,\r\n    {\r\n        login\r\n    }\r\n)(LoginForm);","import {ThunkAction} from 'redux-thunk';\r\nimport {StateType} from '../redux-store';\r\nimport {getUserData} from './auth-reducer';\r\n\r\nconst SET_INITIALISATION = 'SET-INITIALISATION';\r\n\r\ntype actionType = setInitialisationActionType\r\n\r\nconst initialState = {\r\n    isInitialisation: false,\r\n}\r\n\r\nconst appReducer = (state = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALISATION:\r\n            return {\r\n                ...state,\r\n                isInitialisation: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype setInitialisationActionType = {\r\n    type: typeof SET_INITIALISATION,\r\n}\r\nconst setInitialisationAC = (): setInitialisationActionType => ({type: SET_INITIALISATION});\r\n\r\nexport const setInitialisation = (): ThunkAction<Promise<void>, StateType, unknown, actionType> => async dispatch => {\r\n\r\n    await dispatch(getUserData());\r\n\r\n    dispatch(setInitialisationAC());\r\n}\r\n\r\nexport default appReducer;","import React, {Suspense, useEffect} from 'react';\nimport Classes from './App.module.css';\nimport {SidebarContainer} from '../Sidebar/SidebarContainer';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport UsersContainer from '../Users/UsersContainer';\nimport ProfileContainer from '../Profile/ProfileContainer';\nimport HeaderContainer from '../Header/HeaderContainer';\nimport Login from '../Login/Login';\nimport {connect} from 'react-redux';\nimport {setInitialisation} from '../../redux/reducers/app-reducer';\nimport {StateType} from '../../redux/redux-store';\nimport Preloader from '../common/Preloader/Preloader';\n\nconst MessagesPage = React.lazy(() => import('../MessagesPage/MessagesPage'));\n\ntype AppType = {\n    isInitialisation: boolean\n    setInitialisation: () => void\n}\n\nfunction App({isInitialisation, setInitialisation}: AppType) {\n\n    useEffect(() => {\n        if (!isInitialisation) {\n            setInitialisation()\n        }\n    }, [isInitialisation])\n\n    return <>\n        {\n            isInitialisation ?\n                <div className={Classes.App}>\n                    <HeaderContainer/>\n                    <aside>\n                        <SidebarContainer/>\n                    </aside>\n                    <main>\n                        <Switch>\n                            <Route path={'/login'} render={() => <Login/>}/>\n                            <Route path={'/profile/:userID?'} render={() => <ProfileContainer/>}/>\n\n                            <Route path={'/messages'} render={() => {\n                                return (\n                                    <Suspense\n                                        fallback={<div>Загрузка...</div>}>\n                                        <MessagesPage/>\n                                    </Suspense>\n                                )\n                            }}/>\n                            <Route path={'/users'} render={() => <UsersContainer/>}/>\n                            <Redirect from={'/'} to={'/profile'}/>\n                        </Switch>\n                    </main>\n                </div> :\n                <div style={{height: '100vh'}}>\n                    <Preloader/>\n                </div>\n        }\n    </>\n}\n\nexport default connect((state: StateType) => ({isInitialisation: state.app.isInitialisation}), {setInitialisation})(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = [\r\n    {\r\n        id: 1,\r\n        name: 'Anton'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Dima'\r\n    }, {\r\n        id: 3,\r\n        name: 'Sveta'\r\n    }\r\n];\r\n\r\nfunction sidebarReducer(state = initialState, action: {}) {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport ThunkMiddleWare from 'redux-thunk';\r\nimport dialogsReducer from './reducers/dialogs-reducer';\r\nimport profileReducer from './reducers/profile-reducer';\r\nimport sidebarReducer from './reducers/sidebar-reducer';\r\nimport usersReducer from './reducers/users-reducer';\r\nimport authReducer from './reducers/auth-reducer';\r\nimport appReducer from './reducers/app-reducer';\r\n\r\nlet reducers = combineReducers({\r\n    friends: sidebarReducer,\r\n    messagesPage: dialogsReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n});\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const Store = createStore(reducers, composeEnhancers(applyMiddleware(ThunkMiddleWare)));\r\n\r\nexport type StateType = ReturnType<typeof Store.getState>\r\n\r\nexport type StoreType = typeof Store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\nimport {Store} from './redux/redux-store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={Store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sidebar\":\"Sidebar_Sidebar__zaf3x\",\"navlink\":\"Sidebar_navlink__1DyOZ\",\"active\":\"Sidebar_active__8lVkR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Pagination_container__12ne5\",\"selectedPage\":\"Pagination_selectedPage__2AEIe\",\"pagination\":\"Pagination_pagination__mpiS3\",\"navButton\":\"Pagination_navButton__2puVG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Post_container__380Sa\",\"infoProfile\":\"Post_infoProfile__3MdhR\",\"avatar\":\"Post_avatar__3DEv-\",\"postText\":\"Post_postText__3Ya8d\",\"likesCount\":\"Post_likesCount__2ffec\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__18I3j\",\"logoBlock\":\"Header_logoBlock___4Z5t\",\"navBlock\":\"Header_navBlock__2Z-tu\",\"navLink\":\"Header_navLink__1inL3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPostForm\":\"MyPosts_addPostForm__Bwop-\",\"textarea\":\"MyPosts_textarea__EW9Dr\",\"button\":\"MyPosts_button__PRCOR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__2CHyd\",\"error\":\"Login_error__UqWgx\"};","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {StateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst mapStateToPropsAuth = (state: StateType) => ({\r\n    isLogin: state.auth.isLogin,\r\n})\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToPropsAuth>;\r\n\r\nexport function WithAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & {}> = ({isLogin, ...restProps}) => {\r\n        if (!isLogin) return <Redirect to=\"/login\"/>\r\n        return (\r\n            <Component {...restProps as WCP}/>\r\n        );\r\n    }\r\n\r\n    return connect(mapStateToPropsAuth, {})(RedirectComponent);\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"User_container__1CCo_\",\"avatarBlock\":\"User_avatarBlock__3ns4R\",\"status\":\"User_status__2ek1b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"MyFriends_friends__1AAzK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Profile_container__1-PTx\",\"main_photo\":\"Profile_main_photo__7hm7E\"};"],"sourceRoot":""}